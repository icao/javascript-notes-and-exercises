/* 
Reto 1: 춰Arregla Twitter!

Problema

Twitter ha sido comprado y quieren eliminar los bots. Te han pedido ayuda para detectar el n칰mero de usuarios en su base de datos que tienen datos corruptos.

La base de datos es muy antigua y est치 en un formato extra침o. Los perfiles requieren tener los siguientes datos:

usr: nombre de usuario
eme: email
psw: contrase침a
age: edad
loc: ubicaci칩n
fll: n칰mero de seguidores

Todo est치 en un fichero donde los datos de usuario son una secuencia de pares `key:value`, que pueden estar en la misma l칤nea o separado por l칤neas, y cada usuario est치 separado por un salto de l칤nea. 춰Ojo porque puede estar todo desordenado!

Ejemplo de input:

usr:@midudev eme:mi@gmail.com psw:123456 age:22 loc:bcn fll:82

fll:111 eme:yrfa@gmail.com usr:@codember psw:123456 age:21 loc:World

psw:11133 loc:Canary fll:333 usr:@pheralb eme:pheralb@gmail.com

usr:@itziar age:19 loc:isle psw:aaa fll:222 eme:itzi@gmail.com

El primer usuario S칈 es v치lido. Tiene todos los campos.
El segundo usuario S칈 es v치lido. Tiene todos los campos.
El tercer usuario NO es v치lido. Le falta el campo `age`.
El cuarto usuario S칈 es v치lido. Tiene todos los campos.

Ahora que ya sabes esto, usa este input para detectar los usuarios incorrectos: https://codember.dev/users.txt

Pistas
Los datos pueden estar en cualquier orden.
Los datos pueden estar en la misma l칤nea o separados por l칤neas.
Los usuarios se separan por un salto de l칤nea en blanco.
Los usuarios pueden estar repetidos, pero no importa, siguen siendo v치lidos.
Pueden venir datos que no son necesarios para el usuario pero eso no lo hacen inv치lidos.
C칩mo enviar la soluci칩n
Usa el comando "submit" para enviar tu soluci칩n con el n칰mero de usuarios correctos + el nombre del 칰ltimo usuario v치lido. Por ejemplo:

$ submit 482@midudev

*/

import fetch from "node-fetch";

const formatData = (data) => {
  let arrayFormated = [];

  const arrayDatosLimpios = data.split("\n\n").map((item) => {
    return [...arrayFormated, item.split("\n")];
  });

  const arrayNuevoFormato = arrayDatosLimpios.map((item) => {
    let iteracion = [];

    item.forEach((item) => {
      item.map((i) => {
        iteracion = [...iteracion, i.split(" ")];
      });
    });

    return iteracion.flat(Infinity);
  });

  const arrayMaps = arrayNuevoFormato.map((usuario) => {
    let matriz = [];
    usuario.forEach((data) => {
      // console.log(data.split(":"));
      matriz = [...matriz, data.split(":")];
    });

    // console.log(matriz);
    return matriz;
  });

  function crearObjeto(dato) {
    const objetoCreado = dato.map((usersCollection) => {
      return Object.fromEntries(usersCollection);
      // TODO: convierte un objetro pero elimina entradas duplicadas. Por ejemplo si existe dos veces la propiedad pages:server  y  pages: blog   . Asigna el ulktimo valor
    });
    return objetoCreado;
  }

  return crearObjeto(arrayMaps);
};

const fetchUsers = async () => {
  try {
    const response = await fetch("https://codember.dev/users.txt");
    const data = await response.text();

    return formatData(data);
  } catch (error) {
    throw new Error("Ocurrio un error al hacer la petici칩n: " + error.message);
  }
};

fetchUsers().then((data) => {
  console.log(data.length);
  const usersValid = data.filter((user) => {
    return (
      user.usr &&
      user.eme &&
      user.psw &&
      user.age &&
      user.loc &&
      user.age &&
      user.loc &&
      user.fll
    );
  });

  console.log(usersValid.length);
  console.log(usersValid[usersValid.length - 1]);
  // 156@giroz  - RESPUESTA CORRECTA, RETO CUMPLIDO 游땙
  /* {
    usr: "@giroz",
    age: "22",
    src: "12",
    icon: "avatar.png",
    terminal: "yes",
    pages: "blog",
    blog: "about",
    loc: "tierra",
    psw: "aaa",
    fll: "222",
    eme: "giroz@gmail.com",
  }; */
});
